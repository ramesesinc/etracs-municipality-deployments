import com.rameses.annotations.*;
import java.rmi.server.*;

class MarketAccountPersistenceInterceptor {
	
	@DataContext("market_account_info")
	def acctInfoEm;

	@DataContext("market_account")
	def acctEm;

	@DataContext("vw_market_account")
	def vwAcctEm;

	@DataContext("market_rental_unit")
	def unitEm;

	@Service("DateService")
	def dateSvc;

	@Service("MarketControlnoService")
	def controlNoSvc;

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'market_account'  }")
	public void beforeCreate( def evt ) {
		def p = evt.args[0];
		p.objid = "RNTALACCT" + new UID();
		if(!p.acctno) {
			p.acctno = controlNoSvc.getNextNo( [varname: "market_account_acctno", centerid: p.centerid ] );
		}
		//we create the account info		
		def ai = acctInfoEm.create( p );
		p.acctinfoid = ai.objid;
	}

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'market_account'  }")
	public void afterCreate( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		acctInfoEm.find( [objid: p.acctinfoid]).update([acctid: result.objid]);
		unitEm.find( [objid: p.unitid ] ).update( [currentacctid: result.objid ] );
	}

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'market_account'  }")
	public void beforeRemove(def evt) {
		def p = evt.args[0];

		def r = acctEm.find( [objid: p.objid ]).select("state,acctinfoid").first();
		if(r.state!="DRAFT") 
			throw new Exception("Account can only be removed in DRAFT state");

		acctEm.find( [objid: p.objid ]).update( [acctinfoid: "{NULL}"] ); 
		acctInfoEm.find( [objid: r.acctinfoid ] ).delete();
		unitEm.find( [currentacctid: p.objid ]  ).update( [currentacctid: "{NULL}"] );
	}

	@After(pattern="PersistenceService.doAction", eval="#{args[0]._schemaname == 'market_account' && args[0]._action == 'approve' }")
	public void doApprove( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		acctEm.find([objid: p.objid]).update([state:"ACTIVE"]);
		result.state = 'ACTIVE';
	}

	@After(pattern="PersistenceService.doAction", eval="#{args[0]._schemaname == 'market_account' && args[0]._action == 'deactivate' }")
	public void doDeactivate( def evt ) {
		def p = evt.args[0];
		def result = evt.result;
		acctEm.find([objid: p.objid]).update([state:"INACTIVE"]);
		result.state = 'INACTIVE';
	}

}