import com.rameses.annotations.*
import com.rameses.common.*
import com.rameses.services.extended.*
import java.io.File
import com.rameses.fileupload.*


class RPTSyncDataServiceManagementService
{   
	@XConnection('fileupload')
    def fu

	@DataContext('rpt_syncdata_error')
	def em_sync_error

	@DataContext('rpt_syncdata_fordownload')
	def em_sync_fordownload

	@Service("Var")
	def var

	@DataContext("rpt_syncdata_var")
	def em_var

	def UPLOAD_FLAG = "fileserver_upload_task_active"
	def DOWNLOAD_FLAG = "fileserver_download_task_active"


	@ProxyMethod
	public def getInfo() {
		def service = [
			uploader: getStatus(UPLOAD_FLAG),
			downloader: getStatus(DOWNLOAD_FLAG),
		]
		def info = [
			service: service,
		]
		return info
	}

	@ProxyMethod
	public def updateUploaderStatus(newstatus) {
		def newValue = "on".equalsIgnoreCase(newstatus) ? 1 : 0;
		em_var.find([name: UPLOAD_FLAG]).update([value: newValue])
		return newstatus;
	}

	@ProxyMethod
	public def updateDownloaderStatus(newstatus) {
		def newValue = "on".equalsIgnoreCase(newstatus) ? 1 : 0;
		em_var.find([name: DOWNLOAD_FLAG]).update([value: newValue])
		return newstatus;
	}

	def getStatus(name) {
		def status = var.getProperty(name, 0).toString()
		return status.matches("1|y|yes|t|true") ? "on" : "off"
	}

}