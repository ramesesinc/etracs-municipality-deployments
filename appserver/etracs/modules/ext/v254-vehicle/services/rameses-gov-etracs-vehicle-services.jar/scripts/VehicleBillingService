import com.rameses.annotations.*;

import com.rameses.rules.common.*;
import vehicle.facts.*;
import treasury.facts.*;
import treasury.utils.*;
import enterprise.facts.*;
import enterprise.utils.*;


/**********************************************************
* This service handles computation of what fees to charge 
***********************************************************/
class VehicleBillingService {
	
	@Service("RuleExecutorService")
	def ruleSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_application")
	def appEm;

	@Service("AssessmentRuleService")
	def assmtSvc;

	@Service(value="HolidayService", connection="enterprise")
	def holidaySvc;

	@ProxyMethod
	public def getBilling( def o ) {
		//find application or vehicleid
		def vehicleid = null;
		def appid = null;
		if(o.appno) {
			def v = appEm.find( [appno: o.appno] ).first();
			appid = v.appid;
		}
		else if( o.appid ) {
			appEm.find( [appno: o.appno] ).first();
		}

	}

	@ProxyMethod
	public def process( def app ) {
		if ( !app.billitems ) { 
			throw new Exception("VehicleBillingService requires billitems");
		}

		if ( !app.apptype ) throw new Exception("app type is required");
		if ( !app.vehicletype ) throw new Exception("vehicle type is required");	
		if ( !app.franchise?.controlno ) throw new Exception("franchise controlno  is required");	

		def svrDate = dateSvc.getServerDate();
		if ( !app.billdate ) app.billdate = svrDate;

		def factBuilder = new treasury.utils.FactBuilder(); 
		def facts = factBuilder.facts; 

		facts << new HolidayFact( 
			handler: { dt-> 
				def h = holidaySvc.lookup( dt ); 
				return ( h != null ); 
			} 
		);

		facts << new VehicleApplication( app );
		facts << new VehicleFranchise( app.franchise );
		facts << new AppDate( app.appdate );
		facts << new treasury.facts.SystemDate(svrDate);
		facts << new treasury.facts.BillDate(app.billdate);

		if ( app.payment?.amount ) {
			facts << new treasury.facts.Payment( amount: app.payment.amount );
		}

		if ( app.billitems ) { 
			factBuilder.addBillItems( app.billitems ); 
		}

		def actions = new RuleAction();
		actions.addCommand( "add-duedate", new treasury.actions.AddDueDate());
		actions.addCommand( "add-billitem", new treasury.actions.AddBillItem());
		actions.addCommand( "add-discount-item", new treasury.actions.AddDiscountItem());
		actions.addCommand( "add-surcharge-item", new treasury.actions.AddSurchargeItem());
		actions.addCommand( "add-interest-item", new treasury.actions.AddInterestItem());
		actions.addCommand( "summarize-item", new treasury.actions.SummarizeBillItem());
		actions.addCommand( "apply-payment", new treasury.actions.ApplyPayment());

		actions.addCommand( "vehicle-ask-info", new enterprise.actions.AskInfo());

		ruleSvc.execute("vehiclebilling", facts, actions, null );

		def result = [:]; 
		result.billitems = facts.findAll{( it instanceof BillItem )}.collect{ it.toMap() } 
		return result;
	}
}